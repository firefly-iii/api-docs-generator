/api/v1/recurrences:
  get:
    summary: List all recurring transactions.
    description: List all recurring transactions.
    operationId: listRecurrence
    tags:
      - recurrences
    parameters:
    - in: query
      name: page
      description: Page number. The default pagination is 50.
      required: false
      schema:
        type: integer
        example: 1
    responses:
      '200':
        description: A list of recurring transactions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurrenceArray'
  post:
    summary: Store a new recurring transaction
    description: Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
    operationId: storeRecurrence
    tags:
      - recurrences
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Recurrence'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Recurrence'
      description: "JSON array or key=value pairs with the necessary recurring transaction information. See the model for the exact specifications."
      required: true
    responses:
      '200':
        description: 'New recurring transaction stored, result in response.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurrenceSingle'
      '422':
        description: 'Validation errors (see body)'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationError'
/api/v1/recurrences/{id}:
  get:
    summary: Get a single recurring transaction.
    description: Get a single recurring transaction.
    operationId: getRecurrence
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
        example: 1
      description: The ID of the recurring transaction.
    tags:
      - recurrences
    responses:
      '200':
        description: 'The requested recurring transaction'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurrenceSingle'
      '404':
        description: Recurring transaction not found
  put:
    operationId: updateRecurrence
    tags:
      - recurrences
    description: Update existing recurring transaction.
    summary: Update existing recurring transaction.
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
        example: 1
      description: The ID of the recurring transaction.
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Recurrence'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Recurrence'
      description: JSON array with updated recurring transaction information. See the model for the exact specifications.
      required: true
    responses:
      '200':
        description: 'Updated recurring transaction stored, result in response'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurrenceSingle'
      '422':
        description: 'Validation errors (see body)'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationError'
  delete:
    operationId: deleteRecurrence
    description: Delete a recurring transaction. Transactions created will not be deleted.
    summary: Delete a recurring transaction.
    tags:
      - recurrences
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
        example: 1
      description: The ID of the recurring transaction.
    responses:
      '204':
        description: Recurring transaction deleted.
      '404':
        description: No such recurring transaction
/api/v1/recurrences/{id}/transactions:
  get:
    summary: List all transactions created by a recurring transaction.
    description: List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
    operationId: listTransactionByRecurrence
    tags:
      - recurrences
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: integer
        example: 1
      description: The ID of the recurring transaction.
    - in: query
      name: page
      description: Page number. The default pagination is 50.
      required: false
      schema:
        type: integer
        example: 1
    - in: query
      name: start
      description: |
        A date formatted YYYY-MM-DD. Both the start and end date must be present.
      required: false
      schema:
        type: string
        format: date
        example: 2018-09-17
    - in: query
      name: end
      description: |
        A date formatted YYYY-MM-DD. Both the start and end date must be present.
      required: false
      schema:
        type: string
        format: date
        example: 2018-09-17
    - in: query
      name: type
      description: Optional filter on the transaction type(s) returned
      required: false
      schema:
        $ref: '#/components/schemas/TransactionTypeFilter'
    responses:
      '200':
        description: A list of transactions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionArray'
/api/v1/recurrences/trigger:
  post:
    summary: "Trigger the creation of recurring transactions (like a cron job)."
    description: |
        Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen.
    operationId: triggerRecurrence
    tags:
      - recurrences
    responses:
      '204':
        description: 'Not triggered (not yet due or unable to).'
      '200':
        description: "Triggered. Due to the way it's fired (an asynchronous job), the result cannot be shown to you."
